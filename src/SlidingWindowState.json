[
    {
        "maxWeight": "3000kg",
        "cow": "cow",
        "buttonPause": false,
        "textInMotion": false,
        "cardNoWriting": "card--no-writing",
        "totalWeight": "3000kg",
        "cowStages": 0,
        "stageOne": true,
        "stageTwo": false,
        "stageThree": false,
        "stageTwoLineOne": "As far as we know for the moment, the heaviest set of three cows weighs ",
        "stageTwoLineTwo": ".",
        "textCowsBefore1": "Imagine that we want to know where the land is most fertile in the same regionâ€¦",
        "textCowsBefore2": "We take a selection of cows from that area, 1 from every field over a distance of 100km. Each field is about 5km long.",
        "textCowsAfter1": "We want to know what are the three male cows living alongside one another with the greatest collective weight.",
        "textCowsAfter2": "This is being undertaken based on the logic that this might be a good indication of the fertility of the land in that area.",
        "singleWeightOne": "900kg",
        "singleWeightTwo": "1100kg",
        "singleWeightThree": "1000kg",
        "singleWeightFour": "1050kg"
    },
    {
        "0": "3000kg",
        "1": "3150kg",
        "2": "2800kg",
        "3": "3160kg",
        "4": "3115kg",
        "5": "3170kg",
        "6": "2810kg",
        "7": "3305kg",
        "8": "3300kg",
        "9": "3310kg",
        "10": "3305kg",
        "11": "3500kg",
        "12": "3490kg",
        "13": "3545kg",
        "14": "3540kg",
        "15": "3580kg",
        "16": "3215kg",
        "17": "3425kg"
    },
    {
        "0": "As far as we know for the moment, the heaviest set of three cows weighs ",
        "1": ".",
        "2": "These three cows weigh ",
        "3": ", which is the heaviest weight we have seen so far.",
        "4": "The three cows weigh ",
        "5": ", which doesn't really change anything.",
        "6": "This is the last set of three cows! We now know that the heaviest set of three cows weighs 3545kg, since this three weigh 3425kg."
    },
    {
        "0": "cow hidden",
        "1": "cow"
    },
    {
        "0": "900kg",
        "1": "1100kg",
        "2": "1000kg",
        "3": "1050kg",
        "4": "750kg",
        "5": "1360kg",
        "6": "1005kg",
        "7": "805kg",
        "8": "1000kg",
        "9": "1500kg",
        "10": "800kg",
        "11": "1010kg",
        "12": "1495kg",
        "13": "995kg",
        "14": "1000kg",
        "15": "1550kg",
        "16": "990kg",
        "17": "1040kg",
        "18": "1185kg",
        "19": "1200kg"
    },
    {
        "1": false,
        "2": false,
        "3": false,
        "4": false,
        "5": false,
        "6": false,
        "7": false,
        "8": false,
        "9": false,
        "10": false,
        "11": false,
        "12": false,
        "13": false,
        "14": false,
        "15": false,
        "16": false,
        "17": false,
        "18": false,
        "19": false,
        "20": false,
        "21": false,
        "22": false,
        "23": false,
        "24": false,
        "25": false,
        "26": false,
        "27": false,
        "28": false,
        "29": false,
        "30": false,
        "31": false,
        "32": false,
        "33": false,
        "34": false,
        "35": false,
        "36": false,
        "37": false,
        "38": false,
        "39": false,
        "40": false,
        "41": false,
        "42": false,
        "43": false,
        "44": false,
        "45": false,
        "46": false,
        "47": false,
        "48": false,
        "49": false,
        "50": false,
        "51": false,
        "52": false,
        "53": false,
        "54": false,
        "55": false,
        "56": false,
        "57": false,
        "58": false,
        "59": false,
        "60": false,
        "61": false,
        "62": false,
        "63": false,
        "64": false,
        "65": false,
        "66": false,
        "67": false,
        "68": false,
        "69": false,
        "70": false
    },
    {
        "animationLink": "animation-link-galaxy",
        "animationLinkImage": "animation-link-image-galaxy",
        "firstAnimationLinkImage": "first-animation-link-image-galaxy",
        "galaxyFold": true,
        "computer": false,
        "leaf": "leaf-galaxy",
        "landingImage": "landing-image-galaxy",
        "blueStructure": "blue-structure-galaxy",
        "yellowStructure": "yellow-structure-galaxy",
        "blueStructureMedium": "blue-structure-medium-galaxy",
        "yellowStructureMedium": "yellow-structure-medium-galaxy",
        "links": "links-galaxy",
        "animationPage": "animation-page-galaxy",
        "panelText": "panel-text-galaxy",
        "panelTextAnimated": "panel-text-animated-galaxy",
        "pText": "p-text-galaxy",
        "slidingButton": "sliding-button-galaxy",
        "minus": "minus-galaxy",
        "plus": "plus-galaxy",
        "hiddenThree": "hidden-three-galaxy",
        "linksContact": "links-contact-galaxy",
        "SWExplanationSpace": "sw-explanation-space-galaxy",
        "SWExplanationButtonSpace": "sw-explanation-button-space-galaxy",
        "SWCodeSpace": "sw-code-space-galaxy",
        "SWExplanationBottomPanel": "sw-explanation-bottom-panel-galaxy"
    },
    {
        "animationLink": "animation-link",
        "animationLinkImage": "animation-link-image",
        "firstAnimationLinkImage": "first-animation-link-image",
        "galaxyFold": false,
        "computer": true,
        "leaf": "leaf",
        "landingImage": "landing-image",
        "blueStructure": "blue-structure",
        "yellowStructure": "yellow-structure",
        "blueStructureMedium": "blue-structure-medium",
        "yellowStructureMedium": "yellow-structure-medium",
        "links": "links",
        "animationPage": "animation-page",
        "panelText": "panel-text",
        "panelTextAnimated": "panel-text-animated",
        "pText": "p-text",
        "slidingButton": "sliding-button",
        "minus": "minus",
        "plus": "plus",
        "hiddenThree": "hidden-three",
        "linksContact": "links-contact",
        "SWExplanationSpace": "sw-explanation-space",
        "SWExplanationButtonSpace": "sw-explanation-button-space",
        "SWCodeSpace": "sw-code-space",
        "SWExplanationBottomPanel": "sw-explanation-bottom-panel"
    },
    {
        "animationLink": "animation-link-iphonemax",
        "animationLinkImage": "animation-link-image-iphonemax",
        "firstAnimationLinkImage": "first-animation-link-image-iphonemax",
        "galaxyFold": false,
        "iPhoneMax": true,
        "computer": false,
        "leaf": "leaf-iphonemax",
        "landingImage": "landing-image-iphonemax",
        "blueStructure": "blue-structure-iphonemax",
        "yellowStructure": "yellow-structure-iphonemax",
        "blueStructureMedium": "blue-structure-medium-iphonemax",
        "yellowStructureMedium": "yellow-structure-medium-iphonemax",
        "links": "links-iphonemax",
        "animationPage": "animation-page-iphonemax",
        "panelText": "panel-text-iphonemax",
        "panelTextAnimated": "panel-text-animated-iphonemax",
        "pText": "p-text-iphonemax",
        "slidingButton": "sliding-button-iphonemax",
        "minus": "minus-iphonemax",
        "plus": "plus-iphonemax",
        "hiddenThree": "hidden-three-iphonemax",
        "linksContact": "links-contact-iphonemax",
        "SWExplanationSpace": "sw-explanation-space-iphonemax",
        "SWExplanationButtonSpace": "sw-explanation-button-space-iphonemax",
        "SWCodeSpace": "sw-code-space-iphonemax",
        "SWExplanationBottomPanel": "sw-explanation-bottom-panel-iphonemax"
    },
    {
        "0": "This is the algorithm pattern that I learnt via Colt Steele's JavaScript Algorithms and Data Structures Masterclass. Let's take a look at how me might handle this problem without using this pattern. This approach makes use of one loop nested inside another. This might not seem so bad, but imagine how many costly operations are required. Were this to be used with a lot of data, these costly operations would make our code go much more slowly.",
        "1": "Let's take a look at sliding window. We use one loop to create our window, the first three cows. Then we subtract the first cow from our window and add the fourth one, to make it 'slide'. We keep making the window slide by repeating this action. All the while, we take a note of any new maximum weight. This is much better! There are far less operations, and ultimately this means that our code will run much more quickly."
    },
    {
        "0": "function maxSubarraySum(arr, num) {",
        "1": "if ( num > arr.length) {",
        "2": " return null;",
        "3": "}",
        "4": "var max = -Infinity;",
        "5": "for (let i = 0; i < arr.length - num + 1; i ++){",
        "6": "temp = 0;",
        "7": "for (let j = 0; j < num; j++){",
        "8": " temp += arr[i + j];",
        "9": "  }",
        "10": " if (temp > max) {",
        "11": " max = temp;",
        "12": " }",
        "13": "  }",
        "14": " return max;",
        "15": "  }"
    },
    {
        "0": "function maxSubarraySum(arr, num) {",
        "1": "let maxSum = 0;",
        "2": "let tempSum = 0;",
        "3": "if (arr.length < num) return null;",
        "4": "for (let i = 0; i < num; i++) {",
        "5": " maxSum += arr[i];",
        "6": " }",
        "7": " tempSum = maxSum;",
        "8": "for (let i = num; i < arr.length; i++) {",
        "9": " tempSum = tempSum - arr[i - num] + arr[i];",
        "10": " maxSum = Math.max(maxSum, tempSum);",
        "11": "}",
        "12": "return maxSum;",
        "13": "}"
    }
]