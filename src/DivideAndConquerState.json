[
    {
        "text": "card",
        "liftFixed": "lift-fixed",
        "animationBackground": "animation-background",
        "layout": "layout",
        "man": "background-man hidden",
        "arrowUp": "fas fa-arrow-up hidden",
        "arrowDown": "fas fa-arrow-down hidden",
        "textDC": "Imagina que estás en un ascensor..."
    },
    {
        "0": "card--no-writing__animated",
        "1": "card--no-writing"
    },
    {
        "0": "card",
        "1": "card finished"
    },
    {
        "0": "lift-fixed",
        "1": "lift-fixed finished"
    },
    {
        "0": "animation-background",
        "1": "animation-background__animated",
        "2": "animation-background finished"
    },
    {
        "0": "layout",
        "1": "layout-animation-finished"
    },
    {
        "0": "background-man hidden",
        "1": "background-man slowly-appear"
    },
    {
        "0": "fas fa-arrow-up hidden",
        "1": "fas fa-arrow-up"
    },
    {
        "0": "fas fa-arrow-down hidden",
        "1": "fas fa-arrow-down"
    },
    {
        "0": "Y estás intentando encontrar algo...",
        "1": "El problema es que solo sabes el número de la planta en binario.",
        "2": "Y no entiendes binario.",
        "3": "En cada planta, hay un hombre...",
        "4": "Él tiene un cartel con el número de la planta en binario...",
        "5": "Pero no habla...",
        "6": "Él explica dónde te tienes que ir...",
        "7": "Señalando con la mano...",
        "8": "¿Qué haces?",
        "9": "¿Simplemente compruebas cada planta?",
        "10": "¿O podrías llegar ahí más fácilmente...",
        "11": "Eligiendo un punto en el medio?",
        "12": "Si él señala para abajo o para arriba...",
        "13": "..sabrás a dónde ir...",
        "14": "Y así quitas la mitad de las posibilidades...",
        "15": "Esto es la lógica de Divide and Conquer...",
        "16": "Un patrón de algoritmos que permite...",
        "17": "que encontremos información más rápidamente...",
        "18": "En una lista ordenada...",
        "19": "Imagina que estás en un ascensor..."
    },
    {
        "0": "This is the algorithm pattern that I learnt via Colt Steele's JavaScript Algorithms and Data Structures Masterclass. Let's take a look at how me might handle this problem without using this pattern. This approach involves checking every item in the array until we find the one we want. If we have a big list of data, that could be very costly and slow down our code.",
        "1": "Let's take a look at our solution with the divide and conquer pattern. If we know our data is in order, we can divide it and make light work of our task. We don't need to search one half, because we can already say with certainty that we will never find it there."
    },
    {
        "0": [
            "function search(arr, val) {",
            "for (let i = 0; i < arr.length; i++) {",
            "if (arr[i] === val) {",
            "return i",
            "  }",
            "}",
            "return -1",
            "}"
        ]
    },
    {
        "0": [
            "function search(array,val) {",
            " let min = 0;",
            "let max = array.length - 1;",
            "while (min <= max) { ",
            "  let middle = Math.floor((min + max)/2);",
            "let currentElement = array[middle];",
            "if (array[middle] < val) {",
            "min = middle + 1;",
            "}",
            "else if (array[middle]>val) {",
            "max = middle - 1;",
            "} else {",
            "return middle;",
            "}",
            "}",
            "return -1;",
            "}"
        ]
    }
]